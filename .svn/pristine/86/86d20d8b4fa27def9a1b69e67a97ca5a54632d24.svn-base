package com.yks.bigdata.service.trackmore.impl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.github.pagehelper.PageHelper;
import com.yks.bigdata.common.ExceptionEnum;
import com.yks.bigdata.common.LoopProcessConstant;
import com.yks.bigdata.dao.ErpEOrdersProcessMapper;
import com.yks.bigdata.dao.Erp_ordersMapper;
import com.yks.bigdata.dao.SystemExceptionMapper;
import com.yks.bigdata.dao.TrackmoreFetchChannelMapper;
import com.yks.bigdata.dto.report.NodeDto;
import com.yks.bigdata.dto.system.SystemException;
import com.yks.bigdata.dto.trackmore.*;
import com.yks.bigdata.service.trackmore.*;
import com.yks.bigdata.util.DateUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.DateFormatUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import java.io.IOException;
import java.util.*;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/**
 * Created by liuxing on 2017/7/16.
 */
@Service
@Scope(value = "singleton")
public class CalculaImpl {

    private static Logger log = LoggerFactory.getLogger(CalculaImpl.class);

    @Autowired
    IRequestTaskService requestTaskService;

    @Autowired
    IStatusInformationService informactionService;

    @Autowired
    IErpOrdersService erpOrdersService;

    @Autowired
    SystemExceptionMapper systemExceptionMapper;

    @Autowired
    ErpEOrdersProcessMapper erpEOrdersProcessMapper;

    @Autowired
    LoopSearchServiceNewImpl loopSearchServiceNew;

    @Transactional("transactionManager")
    private ErpOrders processTrackmoreSource(List<JSONObject> jsonObjects, List<LogisticsStatus> statusList, ErpOrders erpOrders, int taskStatus){
        Map<Integer, ErpEOrdersProcess> processMap = new HashMap<>();
        for (int i=jsonObjects.size()-1;i>=0;i--){//因为数据是倒序的，现在倒着遍历就成 顺序的
            processMap = getStatus(statusList, jsonObjects.get(i), erpOrders, processMap);
        }
        /*补时间*/
        for (int i=1;i<=erpOrders.getTrackStatus();i++){
            ErpEOrdersProcess erpEOrdersProcess1 = processMap.get(i);
            if(erpEOrdersProcess1 == null){
                ErpEOrdersProcess erpEOrdersProcess2 = processMap.get(i + 1);
                if(erpEOrdersProcess2 != null && erpEOrdersProcess2.getProcessTime() != null){
                    Date date = loopSearchServiceNew.getDate(erpEOrdersProcess2.getProcessTime(), jsonObjects);
                    ErpEOrdersProcess erpEOrdersProcess = new ErpEOrdersProcess();
                    erpEOrdersProcess.setErpOrdersId(erpOrders.getErpOrdersId());
                    erpEOrdersProcess.setCreateTime(new Date());
                    erpEOrdersProcess.setNodeStatus(i);
                    erpEOrdersProcess.setProcessTime(date);
                    processMap.put(i,erpEOrdersProcess);
                }
            }
        }
        /*计算最后一个时间*/
        if(taskStatus == 5){
            ErpEOrdersProcess erpEOrdersProcess = new ErpEOrdersProcess();
            erpEOrdersProcess.setErpOrdersId(erpOrders.getErpOrdersId());
            erpEOrdersProcess.setCreateTime(new Date());
            erpEOrdersProcess.setNodeStatus(statusList.size());

            Date date = null;
            try{date = DateUtils.formmatStr(jsonObjects.get(0).getString("Date"), "yyyy-MM-dd HH:mm");}catch (Exception ex){}
            erpEOrdersProcess.setProcessTime(date);
            processMap.put(statusList.size(),erpEOrdersProcess );
        }
        /*保存各节点时间*/
        if(!CollectionUtils.isEmpty(erpEOrdersProcessMapper.selectNodes(erpOrders.getErpOrdersId()))){
            erpEOrdersProcessMapper.deleteByErpOrderId(erpOrders.getErpOrdersId());
        }
        for (Map.Entry<Integer,ErpEOrdersProcess> entry:processMap.entrySet()){
            erpEOrdersProcessMapper.insert(entry.getValue());
        }
        return erpOrders;
    }


    /**
     * 判断订单异常
     * 标准 :
     * state=10 未上网 判断response 是否含有Pickup shipment checked in at时间为 48
     * state=11 未封发 判断response 是否含有Shipment designated to时间为 72
     * state=12 未交航 判断response 是否含有Shipment arrived at airport时间为 96
     * state=13 未到目的国 判断response 是否含有Custom cleared and arrived at时间为 120
     * state=14 未妥投 判断response 是否含有DELIVERE DSHIPMENT DELIVERED时间为 144
     *
     * @param task
     * @param item
     */
    public ErpOrders judeStateException( RequestTask task, JSONObject item) throws Exception {
        ErpOrders erpOrders = erpOrdersService.selectOrderByOrderId(task.getErpOrdersId());
        int erpStatus = erpOrders.getTrackStatus();
        Long minus = System.currentTimeMillis() - erpOrders.getOrdersExportTime().getTime();

        //检查渠道是否有匹配状态
        List<LogisticsStatus> logisticsStatuses = informactionService.selectByChannel(task.getChannel());
        if (CollectionUtils.isEmpty(logisticsStatuses)){
            log.info("该request task 没有查找到合适的状态 (上网 交航等) : request task id为:" + task.getId() + "\n 返回的json串为:" + item.toJSONString());
            erpOrders.setTrackStatus(ExceptionEnum.NOT_FOUND_LOGISTICS_STATUS.getValue());
            erpOrdersService.updateTrackmoreStatus(erpOrders);
            return erpOrders;
        }
        //冒泡排序记录和判断信息是否为空
        List<JSONObject> jsonObjects = loopSearchServiceNew.sortDate(item);
        if(CollectionUtils.isEmpty(jsonObjects)){
            return erpOrders;
        }
        erpOrders = this.processTrackmoreSource(jsonObjects, logisticsStatuses, erpOrders, task.getTaskStatus());
        //erpOrders.setExceptionStatus(getExceptionStatus(status, minus));
        if(task.getTaskStatus() == 5){
            erpOrders.setTrackStatus(logisticsStatuses.size());
        }
        if(erpStatus != erpOrders.getTrackStatus())//判断是否计算出状态，如果有则更新
        {
            erpOrdersService.updateErpOrders(erpOrders);//标记状态 和时间
        }
        return erpOrders;
    }

    private Map<Integer,ErpEOrdersProcess> getStatus(List<LogisticsStatus> statusList, JSONObject jsonObject, ErpOrders erpOrders, Map<Integer,ErpEOrdersProcess> processMap){
        String statusDescription = jsonObject.getString("StatusDescription") + "," +jsonObject.getString("Details");
        for (LogisticsStatus logisticsStatus:statusList) {
            if(loopSearchServiceNew.splitStatus(logisticsStatus,statusDescription)){
                ErpEOrdersProcess erpEOrdersProcess = new ErpEOrdersProcess();
                erpEOrdersProcess.setErpOrdersId(erpOrders.getErpOrdersId());
                erpEOrdersProcess.setCreateTime(new Date());
                erpEOrdersProcess.setNodeStatus(logisticsStatus.getSort());
                Date date = null;
                try{date = DateUtils.formmatStr(jsonObject.getString("Date"),"yyyy-MM-dd HH:mm");}catch (Exception ex){log.error("判断状态时间转换异常");}
                erpEOrdersProcess.setProcessTime(date);
                processMap.put(logisticsStatus.getSort(),erpEOrdersProcess);
                erpOrders.setTrackStatus(logisticsStatus.getSort());
            }
        }
        return processMap;
    }

    /**
     * 判断状态异常
     * @param status
     * @param minus
     * @return
     */
    /*private Integer getExceptionStatus(Integer status, Long minus){
        int exceptionStatus = 0;
        if(status == 1 && minus >= 72 * 3600 * 1000){
            exceptionStatus = ExceptionEnum.TRACKMORE_STATUS11.getValue();//上网了 未封发
        }else if(status == 2 && minus >= 96 * 3600 * 1000){
            exceptionStatus = ExceptionEnum.TRACKMORE_STATUS12.getValue();//封发了 未交航
        }else if(status == 3 && minus >= 120 * 3600 * 1000){
            exceptionStatus = ExceptionEnum.TRACKMORE_STATUS13.getValue();//交航 未落地
        }else if(status == 4 && minus >= 144 * 3600 * 1000){
            exceptionStatus = ExceptionEnum.TRACKMORE_STATUS14.getValue();//落地 未妥投
        }else if(status == 803 && minus >= 48 * 3600 * 1000){
            exceptionStatus = ExceptionEnum.TRACKMORE_STATUS10.getValue();//上网
        }
        return exceptionStatus;
    }*/

}
