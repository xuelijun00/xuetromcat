package com.yks.bigdata.web.trackmore;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.yks.bigdata.common.ExceptionEnum;
import com.yks.bigdata.dto.trackmore.ErpOrders;
import com.yks.bigdata.service.trackmore.IErpOrdersService;
import com.yks.bigdata.util.CsvUtils;
import com.yks.bigdata.web.vo.FilterDto;
import com.yks.bigdata.web.vo.GridModel;

import com.yks.bigdata.web.vo.MessageVo;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import java.util.List;

/**
 * Created by Administrator on 2017/6/30.
 */

@Controller
@RequestMapping("/Abnormal")
public class AbnormalController {

    @Autowired
    IErpOrdersService  erpOrdersService;
    

    @ResponseBody
    @RequestMapping(value = "/get",method = RequestMethod.GET)
    public GridModel getData(FilterDto filterDto, HttpServletRequest request){
		String[] platforms = request.getParameterValues("platforms[]");
		String[] country = request.getParameterValues("country[]");
		String[] channelNames = request.getParameterValues("channelNames[]");
		String ordersMailCode = request.getParameter("ordersMailCode");
		String startTime = request.getParameter("startTime");
		String endTime = request.getParameter("endTime");

		ErpOrders erpOrder = new ErpOrders();
		if (platforms != null && platforms.length > 0) {
			erpOrder.setPlatform("'" + StringUtils.join(platforms, "','") + "'");
		}
		if (country != null && country.length > 0) {
			erpOrder.setBuyerCountry("'" + StringUtils.join(country, "','") + "'");
		}
		if (channelNames != null && channelNames.length > 0) {
			erpOrder.setChannelName("'" + StringUtils.join(channelNames, "','") + "'");
		}
		if(StringUtils.isNotEmpty(ordersMailCode)){
			erpOrder.setOrdersMailCode(ordersMailCode);
		}
		if(StringUtils.isNotEmpty(startTime)){
			erpOrder.setStartTime(startTime);
		}
		if(StringUtils.isNotEmpty(endTime)){
			erpOrder.setEndTime(endTime);
		}
    	
        PageHelper.startPage(filterDto.getPage(), filterDto.getRows(), true);
        List<ErpOrders> phy = erpOrdersService.selectExceptionErpOrders(erpOrder);
        GridModel gridModel = new GridModel(new PageInfo<>(phy));
        gridModel.setPagesize(filterDto.getRows());
        return gridModel;
    }

    @RequestMapping(value = "/view",method = RequestMethod.GET)
    public String view(ErpOrders erpOrder, HttpServletRequest request, String[] platforms, String[] country,String[] channelNames
			,String ordersMailCode,String startTime,String endTime){
		if (platforms != null && platforms.length > 0) {
			erpOrder.setPlatform("'" + StringUtils.join(platforms, ",") + "'");
		}
		if (country != null && country.length > 0) {
			erpOrder.setBuyerCountry("'" + StringUtils.join(country, "','") + "'");
		}
		if (channelNames != null && channelNames.length > 0) {
			erpOrder.setChannelName("'" + StringUtils.join(channelNames, ",") + "'");
		}
		if(StringUtils.isNotEmpty(ordersMailCode)){
			erpOrder.setOrdersMailCode(ordersMailCode);
		}
		if(StringUtils.isNotEmpty(startTime)){
			erpOrder.setStartTime(startTime);
		}
		if(StringUtils.isNotEmpty(endTime)){
			erpOrder.setEndTime(endTime);
		}
    	
        PageHelper.startPage(1, 10, true);
        List<ErpOrders> phy = erpOrdersService.selectExceptionErpOrders(erpOrder);
        request.setAttribute("table",new GridModel(new PageInfo<>(phy)));
        request.setAttribute("erporderParam",erpOrder);
        request.setAttribute("platform", erpOrdersService.selectplatform());
		request.setAttribute("erpcountries", erpOrdersService.selectbuyerCountry());
		request.setAttribute("channelNames", erpOrdersService.selectchannelName());
		request.setAttribute("platformParam", platforms);
		request.setAttribute("countryParam", country);
		request.setAttribute("channelNameParam", channelNames);
        return "trackmore/abnormal";
    }

    @ResponseBody
	@RequestMapping(value = "/updateExceptionMessage",method = RequestMethod.GET)
    public MessageVo updateExceptionMessage(String ordersMailCode, String message){
		erpOrdersService.updateExceptionMessage(ordersMailCode, message);
    	return new MessageVo(200,"增加备注成功");
	}

	/**
	 * 上传异常备注
	 * @param file
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/upload",method = RequestMethod.POST)
	public MessageVo upload(MultipartFile file){
    	try{
			String lines = IOUtils.toString(file.getInputStream(), "GBK");
			if(lines == null || lines.trim().length() <= 0){
				return new MessageVo(HttpStatus.SC_BAD_REQUEST,"不能上传空文件");
			}
			CSVParser parse = CSVParser.parse(lines, CSVFormat.DEFAULT);
			List<CSVRecord> records = parse.getRecords();
			for (int i = 1;i<records.size();i++){
				String trackCode = records.get(i).get(4);
				String remark = records.get(i).get(8);
				if(StringUtils.isNotEmpty(trackCode) && StringUtils.isNotEmpty(remark)){
					ErpOrders erpOrders = new ErpOrders();
					erpOrders.setOrdersMailCode(trackCode);
					List<ErpOrders> erpOrders1 = erpOrdersService.selectExceptionErpOrders(erpOrders);
					if(CollectionUtils.isEmpty(erpOrders1)){
						erpOrdersService.updateExceptionMessage(trackCode, remark);
					}else{//本来不是异常的标记为异常
						erpOrdersService.updateExceptionMessage(trackCode, remark, ExceptionEnum.customize_exception.getValue());
					}
				}
			}
		}catch (Exception ex){
    		ex.printStackTrace();
			return new MessageVo(400,"上传异常备注成功");
		}
		return new MessageVo(200,"上传备注成功");
	}


}
